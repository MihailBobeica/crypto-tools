#!/usr/bin/env python3


import unittest

from padders import sha256pad
from sha256fromstate import sha256fromstate


class TestPadders(unittest.TestCase):
	
	def test_extended_pad(self):
		# check if normal padding corresponds to extended padding
		# where extended padding means:
		# I know that there is something preppended to my message
		# so I need to take it in consideration
		premessage = "PAD"
		premessage_length = len(premessage)
		message0 = premessage + "hello world!"
		message1 = message0[premessage_length:]
		bm0 = bytearray(message0, "ascii")
		bm1 = bytearray(message1, "ascii")
		out0 = sha256pad(bm0)
		out1 = sha256pad(bm1, premessage_length)
		self.assertEqual(out0[len(message0):], out1[len(message1):])


class sha256FromState(unittest.TestCase):

	def test_result(self):
		message = b"ciao"
		from hashlib import sha256
		self.assertEqual(sha256fromstate(message), sha256(message).digest())

	def test_sha_from_state(self):
		extended_message = b"m"
		message = b"a" * 64
		padded_message = sha256pad(message) + extended_message
		from hashlib import sha256
		state = sha256(message).digest()
		self.assertEqual(None, sha256(padded_message).digest())


if __name__ == '__main__':
	unittest.main()
